#!/bin/bash

###############################################################################
# Haula
# Installer
#
# Using Simple_Installer_Template v1.0.0 by Juan Jose Castro Sotelo
# Licensed under terms of GPLv3
#
###############################################################################



# EDIT install.conf to customize the installer


# ====== INCLUDES ======

. install.config  # Modify this file to customize the installer for an app
. tools-bash.0.7.0



# ====== VIEW FUNCTIONS ======

show_help()
{
  echo "\
Usage: ${0##*/} <options>

Install the application '$APPNAME' in the operating system.
[options]
  -d, --instdir DIR
    Target directory where the application will be installed
    Default: $INSTDIR_DFL
  -r, --rootdir DIR
    Set the root path of the operating system file system.
    Useful for .deb building, jails, etc. For example, /etc/environment will be 
    searched in {DIR}/etc/environment
    Default: ${ROOTDIR_DFL:-/}
  -u, --uninstall
    Uninstall the application from the operating system.
  -h, --help
    Show this information"
}


show_option_error()
{
  echo "\
Bad action, option or argument. Take a look at:

    $ ${0##*/} --help" >&2
}



# ====== INSTALLATION/UNINSTALLATION FUNCTIONS ======

do_install()
{
  # DO NOT TOUCH this function to adapt the installer to a new app.
  # Use install.config instead to customize

  local success=true

  ROOTDIR="${ROOTDIR:-$ROOTDIR_DFL}"
  INSTDIR="${INSTDIR:-$INSTDIR_DFL}"
  BINDIR="${BINDIR:-$BINDIR_DFL}"
  LIBDIR="${LIBDIR:-$LIBDIR_DFL}"
  KMODDIR="${KMODDIR:-$KMODDIR_DFL}"
  KRELEASE="${KRELEASE:-$KRELEASE_DFL}"
  
  # Get sure ROOTDIR ends with / (note that in POSIX double / is not a problem)
  [[ "$ROOTDIR" != "" && ! "$ROOTDIR" =~ /$ ]] && ROOTDIR="${ROOTDIR}/"
  
  targetdir="`echo "${ROOTDIR}${INSTDIR}" | rmDuplicatedForwardSlashesInPath`"

  if [ "$OPTUNATTENDED" == false ] \
  && ! askYes "This will install '$APPNAME' in '${targetdir}'. Continue?"
  then
    echo "\
Cancelled!"
    exit 2
  fi


  # SPECIFIC APP EXTRA ACTIONS
  # Write in install.config the code for other needed checkings and preparations
  CUSTOM_ACTIONS_PREINSTALL
  
  
  echo "\
Installing app '${APPNAME}' in ${targetdir}..."

  mkdir -p "${targetdir}" \
  && success=true || success=false

  # INSTALLATION OF EVERY FILE IF LIST "FILES_LIST"
  for ((i=0; i<${#FILES_LIST[*]} && $success == true; i++)) do
    read filename mode autosymlink symlinks_list < <(local IFS=":"; echo ${FILES_LIST[$i]})
    
    # Copying file to the target installation path with defined permissions
    install -v --mode=$mode "$filename" "${targetdir}" \
    && success=true || success=false
    
    # Create automatic symbolic link to file if enabled
    if [ "$success" == true -a "$autosymlink" == "y" ]; then
      if [[ $filename =~ \.so$ ]]; then
        symlink="$LIBDIR/${filename}"
        #TODO Create a symlink for every version of .so (E.g.: .so.1.2.3)
      elif [[ $filename =~ \.ko$ ]]; then
        symlink="${KMODDIR}${KRELEASE}/${filename}"
      elif [ $(( ($mode / 100) & 2#001 )) == "1" ]; then
        # File is executable for the owner user
        symlink="${BINDIR}/${filename}"
      fi
      
      [ "$success" == true ] \
      && echo "\
Creating symlink '$symlink' => '${targetdir}/${filename}'..." \
      && mkdir -p "`dirname "$symlink"`" \
      && ln -fs "${targetdir}/${filename}" "$symlink" \
      && success=true || success=false
    fi
    
    # Create custom symbolic links to file if specified in FILES_LIST
    if [ "$success" == true -a "$symlinks_list" != "" ]; then
      preIFS=$IFS; IFS=","
      for symlink in $symlinks_list; do
        [ "$success" == true ] \
        && echo "\
Creating symlink '$symlink' => '${targetdir}/${filename}'..." \
        && mkdir -p "`dirname "$symlink"`" \
        && ln -fs "${targetdir}/${filename}" "$symlink" \
        && success=true || success=false
      done
      IFS=$preIFS
    fi
  done

  if [ "$success" == false ]; then
    echo "\
Error installing files!" >&2
    exit 1
  fi
  
  #addToSystemPath
  
  
  # SPECIFIC APP EXTRA ACTIONS
  # Write in install.config the code for other needed actions than copying files
  CUSTOM_ACTIONS_POSTINSTALL


  # ====== MESSAGE FOR INSTALLATION ENDING ======
  
  echo "\
Success installing '$APPNAME'"

  [ "$ROOTDIR" == "" ] && echo "\
Log-out and log-in in the terminal to use '$APPNAME' from any location."
}


do_uninstall()
{
  # DO NOT TOUCH this function to adapt the installer to a new app.
  # Use install.config instead to customize

  local success=true
  
  ROOTDIR="${ROOTDIR:-$ROOTDIR_DFL}"
  BINDIR="${BINDIR:-$BINDIR_DFL}"
  LIBDIR="${LIBDIR:-$LIBDIR_DFL}"
  KMODDIR="${KMODDIR:-$KMODDIR_DFL}"
  KRELEASE="${KRELEASE:-$KRELEASE_DFL}"

  # Get sure ROOTDIR ends with / (note that in POSIX double / is not a problem)
  [[ "$ROOTDIR" != "" && ! "$ROOTDIR" =~ /$ ]] && ROOTDIR="${ROOTDIR}/"
  [ "$ROOTDIR" == "/" ] && ROOTDIR=""

  # Get the application installation path
  # Note: Duplicated forward slashes are removed for cosmetic reasons
  if [ "$INSTDIR" == "" ]; then
    whichpath="`which ${APPNAME}`"
  fi

  if [ "$whichpath" != "" ]; then
    INSTDIR="`resolveSymlink "$whichpath" | xargs dirname`"
  else
    INSTDIR="$INSTDIR_DFL"
  fi
  
  targetdir="`echo "${ROOTDIR}${INSTDIR}" | rmDuplicatedForwardSlashesInPath`"

  # Checkings prior starting uninstalling
  if [ ! -d "${targetdir}" ]; then
    echo "\
Error: App '$APPNAME' not installed (path: ${targetdir})" >&2
    exit 1
  fi
  
  if [ "$OPTUNATTENDED" == false ] \
  && ! askYes "This will uninstall '$APPNAME' in '${targetdir}'. Continue?"
  then
    echo "Cancelled!"
    exit 2
  fi
  
  
  # SPECIFIC APP EXTRA ACTIONS
  # Write in install.config the code for other needed checkings and preparations
  CUSTOM_ACTIONS_PREUNINSTALL


  echo "\
Uninstalling '${APPNAME}' from '${targetdir}'..."

  # UNINSTALLATION OF EVERY FILE IF LIST "FILES_LIST"
  for ((i=0; i<${#FILES_LIST[*]} && $success == true; i++)) do
    read filename mode autosymlink symlinks_list < <(local IFS=":"; echo ${FILES_LIST[$i]})
    
    # Remove automatically created symbolic link to file
    if [ "$success" == true -a "$autosymlink" == "y" ]; then
      if [[ $filename =~ \.so$ ]]; then
        symlink="$LIBDIR/${filename}"
        #TODO Create a symlink for every version of .so (E.g.: .so.1.2.3)
      elif [[ $filename =~ \.ko$ ]]; then
        symlink="${KMODDIR}${KRELEASE}/${filename}"
      elif [ $(( ($mode / 100) & 2#001 )) == "1" ]; then
        # File is executable for the owner user
        symlink="${BINDIR}/${filename}"
      fi
      
      [ "$success" == true ] \
      && echo "\
Removing symlink '$symlink' => '${targetdir}/${filename}'..." \
      && rm -vf "$symlink" \
      && success=true || success=false
    fi
    
    # Remove custom symbolic links to file as specified in FILES_LIST
    if [ "$success" == true -a "$symlinks_list" != "" ]; then
      preIFS=$IFS; IFS=","
      for symlink in $symlinks_list; do
        [ "$success" == true ] \
        && echo "\
Removing symlink '$symlink'=>'${targetdir}/${filename}'..." \
        && rm -vf "$symlink" \
        && success=true || success=false
      done
      IFS=$preIFS
    fi

    if [ "$success" == false ]; then
      echo "\
Error removing symlink!" >&2
      exit 1
    fi
  
    # Remove file from installation directory
    if [ "$success" == true ]; then
      rm -vf "${targetdir}/${filename}" \
      && success=true || success=false
    fi
    
    if [ "$success" == false ]; then
      echo "\
Error removing file from installation directory!" >&2
      exit 1
    fi
  done

  # Removing application directory
  if ! isDirEmpty "${targetdir}/"; then
    if [ "$OPTUNATTENDED" == false ] \
    && askYes "Directory '${targetdir}' is not empty. Remove it?" n
    then
#      echo "\
#Removing application directory '${targetdir}'..."
      rm -vR "${targetdir}/" && success=true || success=false
    fi
  else
#    echo "\
#Removing application directory '${targetdir}'..."
    rmdir -v "${targetdir}/" && success=true || success=false
  fi
  
  if [ "$success" == false ]; then
    echo "\
Error removing application directory!" >&2
    exit 1
  fi
  
  #rmFromSystemPath
  

  # SPECIFIC APP EXTRA ACTIONS
  # Write in install.config the code for other needed actions than copying files
  CUSTOM_ACTIONS_POSTUNINSTALL


  # ====== MESSAGE FOR INSTALLATION ENDING ======
  
  echo "\
Success uninstalling '$APPNAME'"

}



# ====== MAIN FUNCTION ======

main()
{
  INSTDIR=""
  ROOTDIR=""
  BINDIR=""
  LIBDIR=""
  KMODDIR=""
  KRELEASE=""
  OPTUNINSTALL=false
  OPTUNATTENDED=false
  
  
  SHORT_OPTS=":d:r:b:l:m:k:uah"
  LONG_OPTS="instdir:,root:,bindir:,libdir:,kmoddir:,krelease:,unattended,uninstall,help"
  args=`getopt -o $SHORT_OPTS --long $LONG_OPTS -- "$@"`
  if [ $? -ne 0 ]; then
    show_option_error
    exit 1
  fi
  eval set -- "$args"


  while true ; do
    case "$1" in
      --instdir | -d )  shift
                        INSTDIR="$1"
                        ;;
      --rootdir | -r )  shift
                        ROOTDIR="$1"
                        ;;
      --bindir | -b )   shift
                        BINDIR="$1"
                        ;;
      --libdir | -l )   shift
                        LIBDIR="$1"
                        ;;
      --kmoddir | -m )  shift
                        KMODDIR="$1"
                        ;;
      --krelease | -k ) shift
                        KRELEASE="$1"
                        ;;
      --uninstall | -u ) 
                        OPTUNINSTALL=true
                        ;;
      --unattended | -a ) 
                        OPTUNATTENDED=true
                        ;;
      --help | -h )     show_help; exit 0
                        ;;
      --)               shift ; break
                        ;;
      *)                echo "Internal error ($1)!" ; exit 1
    esac
    shift
  done


  exitIfNotRoot

  if [ "$OPTUNINSTALL" == true ]; then
    do_uninstall
  else
    do_install
  fi

}


main "$@"

